import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a7175731.js";const F=JSON.parse('{"title":"Règles","description":"","frontmatter":{},"headers":[],"relativePath":"த/ipa/règles.md","filePath":"த/ipa/règles.md"}'),e={name:"த/ipa/règles.md"},p=l(`<h1 id="regles" tabindex="-1">Règles <a class="header-anchor" href="#regles" aria-label="Permalink to &quot;Règles&quot;">​</a></h1><p>Les règles vous permettent de contrôler automatiquement la qualité des données dans vos <a href="./bds.html">bases de données</a> autant que dans vos <a href="./nuées.html">nuées</a> de données.</p><h2 id="sources" tabindex="-1">Sources <a class="header-anchor" href="#sources" aria-label="Permalink to &quot;Sources&quot;">​</a></h2><p>Les règles peuvent être appliquées soit aux <a href="./variables.html#regles">variables</a>, soit directement aux <a href="./tableaux.html#regles">tableaux</a>.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Lorsque multiples règles s&#39;appliquent à une colonne d&#39;un tableau, soit-ce par sa variable ou bien directement du tableau lui-même, elles sont toutes appliquées aux valeurs de la colonne. Par exemple, si une variable représentant la température minimale a la règle <code>tempMin &gt;= -80</code> et la colonne a la règle <code>tempMin &lt;= tempMax</code>, la règle de validation effective sera <code>-80 &lt;= tempMin &lt;= tempMax</code>.</p></div><h2 id="types-de-regles" tabindex="-1">Types de règles <a class="header-anchor" href="#types-de-regles" aria-label="Permalink to &quot;Types de règles&quot;">​</a></h2><p>Constellation inclut quatre types de règles.</p><h3 id="_1-categorie-variable" tabindex="-1">1. Catégorie variable <a class="header-anchor" href="#_1-categorie-variable" aria-label="Permalink to &quot;1. Catégorie variable&quot;">​</a></h3><p>Ces règles sont appliquées automatiquement selon la catégorie associée à la variable et s&#39;assurent que les valeurs de la variable sont de la bonne catégorie. Vous n&#39;avez pas besoin de les spécifier manuellement.</p><h3 id="_2-existe" tabindex="-1">2. Existe <a class="header-anchor" href="#_2-existe" aria-label="Permalink to &quot;2. Existe&quot;">​</a></h3><p>Les règles de type <code>existe</code> précisent que les valeurs manquantes ne sont pas acceptables. Elles peuvent être appliquées à tout type de variable.</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { valid } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { générerClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">générerClient</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">créerVariable</span><span style="color:#E1E4E8;">({ catégorie: </span><span style="color:#9ECBFF;">&quot;image&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">règleExiste</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeRègle: </span><span style="color:#9ECBFF;">&quot;existe&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    détails: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Les colonnes associées à cette variable ne peuvent pas contenir de données manquantes</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">ajouterRègleVariable</span><span style="color:#E1E4E8;">({ idVariable, règle })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { valid } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { générerClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">générerClient</span><span style="color:#24292E;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">créerVariable</span><span style="color:#24292E;">({ catégorie: </span><span style="color:#032F62;">&quot;image&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">règleExiste</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    typeRègle: </span><span style="color:#032F62;">&quot;existe&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    détails: {},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Les colonnes associées à cette variable ne peuvent pas contenir de données manquantes</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">ajouterRègleVariable</span><span style="color:#24292E;">({ idVariable, règle })</span></span></code></pre></div><h3 id="_3-bornes" tabindex="-1">3. Bornes <a class="header-anchor" href="#_3-bornes" aria-label="Permalink to &quot;3. Bornes&quot;">​</a></h3><p>Les règles de type <code>bornes</code> limitent les valeurs possibles d&#39;une variable numérique ou d&#39;horodatage. Les bornes peuvent être relatives à une valeur fixe ou bien à une autre variable ou colonne dans le tableau.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Chaque règle effectue une seule comparaison. Pour borner une variable des deux côtés, utiliser deux règles bornes.</p></div><h4 id="bornes-fixes" tabindex="-1">Bornes fixes <a class="header-anchor" href="#bornes-fixes" aria-label="Permalink to &quot;Bornes fixes&quot;">​</a></h4><p>Les bornes fixes précisent une valeur contre laquelle les valeurs des données seront comparées. L&#39;opération de comparaison peut être l&#39;une de <code>&#39;&gt;&#39;</code>, <code>&#39;&lt;&#39;</code>, <code>&#39;≥&#39; | &#39;&gt;=&#39;</code> ou <code>&#39;≤&#39; | &#39;&lt;=&#39;</code>.</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { valid } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { générerClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">générerClient</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">créerVariable</span><span style="color:#E1E4E8;">({ catégorie: </span><span style="color:#9ECBFF;">&quot;numérique&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">sauvegarderNomVariable</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    idVariable, nom: </span><span style="color:#9ECBFF;">&quot;précipitation&quot;</span><span style="color:#E1E4E8;">, langue: </span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// La précipitation doit être positive</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">règleBornes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">détailsRègleBornesFixe</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeRègle: </span><span style="color:#9ECBFF;">&quot;bornes&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    détails: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&quot;fixe&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        val: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        op: </span><span style="color:#9ECBFF;">&quot;≥&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// ou bien &quot;&gt;=&quot; ; c&#39;est pareil</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">ajouterRègleVariable</span><span style="color:#E1E4E8;">({ idVariable, règle })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { valid } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { générerClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">générerClient</span><span style="color:#24292E;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">créerVariable</span><span style="color:#24292E;">({ catégorie: </span><span style="color:#032F62;">&quot;numérique&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">sauvegarderNomVariable</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    idVariable, nom: </span><span style="color:#032F62;">&quot;précipitation&quot;</span><span style="color:#24292E;">, langue: </span><span style="color:#032F62;">&quot;fr&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// La précipitation doit être positive</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">règleBornes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">détailsRègleBornesFixe</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    typeRègle: </span><span style="color:#032F62;">&quot;bornes&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    détails: {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&quot;fixe&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        val: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        op: </span><span style="color:#032F62;">&quot;≥&quot;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// ou bien &quot;&gt;=&quot; ; c&#39;est pareil</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">ajouterRègleVariable</span><span style="color:#24292E;">({ idVariable, règle })</span></span></code></pre></div><h4 id="bornes-dynamiques" tabindex="-1">Bornes dynamiques <a class="header-anchor" href="#bornes-dynamiques" aria-label="Permalink to &quot;Bornes dynamiques&quot;">​</a></h4><p>Les bornes dynamiques comparent les données à une valeur dynamique provenant d&#39;une autre colonne du même tableau. Ces comparaisons s&#39;effectuent ligne par ligne ; c&#39;est-à-dire, chaque valeur sera comparée à la valeur de la variable ou colonne référence dans la même ligne du tableau.</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { valid } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { générerClient } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@constl/ipa&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">générerClient</span><span style="color:#E1E4E8;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idVariableTempMin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">créerVariable</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    catégorie: </span><span style="color:#9ECBFF;">&quot;numérique&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">sauvegarderNomVariable</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    idVariable: idVariableTempMin, nom: </span><span style="color:#9ECBFF;">&quot;température minimum&quot;</span><span style="color:#E1E4E8;">, langue: </span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idVariableTempMax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">créerVariable</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    catégorie: </span><span style="color:#9ECBFF;">&quot;numérique&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">sauvegarderNomVariable</span><span style="color:#E1E4E8;">({ </span></span>
<span class="line"><span style="color:#E1E4E8;">    idVariable: idVariableTempMax, nom: </span><span style="color:#9ECBFF;">&quot;température maximum&quot;</span><span style="color:#E1E4E8;">, langue: </span><span style="color:#9ECBFF;">&quot;fr&quot;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// La température minimum ne peut pas être supérieure à la température maximum correspondante</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">règleBornes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">détailsRègleBornesDynamiqueVariable</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeRègle: </span><span style="color:#9ECBFF;">&quot;bornes&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    détails: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&quot;dynamiqueVariable&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        val: idVariableTempMax,</span></span>
<span class="line"><span style="color:#E1E4E8;">        op: </span><span style="color:#9ECBFF;">&quot;≤&quot;</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// ou bien &quot;&lt;=&quot; ; c&#39;est pareil</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.variables.</span><span style="color:#B392F0;">ajouterRègleVariable</span><span style="color:#E1E4E8;">({ idVariable: idVariableTempMin, règle });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { valid } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { générerClient } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@constl/ipa&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">générerClient</span><span style="color:#24292E;">({});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idVariableTempMin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">créerVariable</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    catégorie: </span><span style="color:#032F62;">&quot;numérique&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">sauvegarderNomVariable</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    idVariable: idVariableTempMin, nom: </span><span style="color:#032F62;">&quot;température minimum&quot;</span><span style="color:#24292E;">, langue: </span><span style="color:#032F62;">&quot;fr&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idVariableTempMax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">créerVariable</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    catégorie: </span><span style="color:#032F62;">&quot;numérique&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">sauvegarderNomVariable</span><span style="color:#24292E;">({ </span></span>
<span class="line"><span style="color:#24292E;">    idVariable: idVariableTempMax, nom: </span><span style="color:#032F62;">&quot;température maximum&quot;</span><span style="color:#24292E;">, langue: </span><span style="color:#032F62;">&quot;fr&quot;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// La température minimum ne peut pas être supérieure à la température maximum correspondante</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">règleBornes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">détailsRègleBornesDynamiqueVariable</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    typeRègle: </span><span style="color:#032F62;">&quot;bornes&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    détails: {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&quot;dynamiqueVariable&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        val: idVariableTempMax,</span></span>
<span class="line"><span style="color:#24292E;">        op: </span><span style="color:#032F62;">&quot;≤&quot;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">// ou bien &quot;&lt;=&quot; ; c&#39;est pareil</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.variables.</span><span style="color:#6F42C1;">ajouterRègleVariable</span><span style="color:#24292E;">({ idVariable: idVariableTempMin, règle });</span></span></code></pre></div><p>Nous pouvons également ajouter une comparaison directement à un tableau, en connectant la règle à l&#39;identifiant de la colonne au lieu de celui de la variable.</p><div class="language-TypeScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">TypeScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idBd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.bds.</span><span style="color:#B392F0;">créerBd</span><span style="color:#E1E4E8;">({ licence: </span><span style="color:#9ECBFF;">&quot;ODBl-1_0&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idTableau</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.bds.</span><span style="color:#B392F0;">ajouterTableauBd</span><span style="color:#E1E4E8;">({ idBd });</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idColonneTempMin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.tableaux.</span><span style="color:#B392F0;">ajouterColonneTableau</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    idTableau,</span></span>
<span class="line"><span style="color:#E1E4E8;">    idVariable: idVariableTempMin,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">idColonneTempMax</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.tableaux.</span><span style="color:#B392F0;">ajouterColonneTableau</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    idTableau,</span></span>
<span class="line"><span style="color:#E1E4E8;">    idVariable: idVariableTempMax,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">règleTempMax</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">règleBornes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">détailsRègleBornesDynamiqueColonne</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    typeRègle: </span><span style="color:#9ECBFF;">&quot;bornes&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    détails: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&quot;dynamiqueColonne&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        val: idColonneTempMin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        op: </span><span style="color:#9ECBFF;">&quot;≥&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.tableaux</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ajouterRègleTableau</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    idTableau,</span></span>
<span class="line"><span style="color:#E1E4E8;">    idColonne: idColonneTempMax,</span></span>
<span class="line"><span style="color:#E1E4E8;">    règle: règleTempMax,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idBd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.bds.</span><span style="color:#6F42C1;">créerBd</span><span style="color:#24292E;">({ licence: </span><span style="color:#032F62;">&quot;ODBl-1_0&quot;</span><span style="color:#24292E;"> });</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idTableau</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.bds.</span><span style="color:#6F42C1;">ajouterTableauBd</span><span style="color:#24292E;">({ idBd });</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idColonneTempMin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.tableaux.</span><span style="color:#6F42C1;">ajouterColonneTableau</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    idTableau,</span></span>
<span class="line"><span style="color:#24292E;">    idVariable: idVariableTempMin,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">idColonneTempMax</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.tableaux.</span><span style="color:#6F42C1;">ajouterColonneTableau</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    idTableau,</span></span>
<span class="line"><span style="color:#24292E;">    idVariable: idVariableTempMax,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">règleTempMax</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">règleBornes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">détailsRègleBornesDynamiqueColonne</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    typeRègle: </span><span style="color:#032F62;">&quot;bornes&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    détails: {</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#032F62;">&quot;dynamiqueColonne&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        val: idColonneTempMin,</span></span>
<span class="line"><span style="color:#24292E;">        op: </span><span style="color:#032F62;">&quot;≥&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.tableaux</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ajouterRègleTableau</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    idTableau,</span></span>
<span class="line"><span style="color:#24292E;">    idColonne: idColonneTempMax,</span></span>
<span class="line"><span style="color:#24292E;">    règle: règleTempMax,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="_4-valeurs-categoriques" tabindex="-1">4. Valeurs catégoriques <a class="header-anchor" href="#_4-valeurs-categoriques" aria-label="Permalink to &quot;4. Valeurs catégoriques&quot;">​</a></h3><p>Les règles de type <code>catégorique</code> s&#39;appliquent à toute catégorie de variable et indiquent que les valeurs de la variable doivent figurer parmi une liste de valeurs possibles. Ces règles peuvent s&#39;appliquer à des variables autant qu&#39;à des tableaux.</p><h4 id="fixes" tabindex="-1">Fixes <a class="header-anchor" href="#fixes" aria-label="Permalink to &quot;Fixes&quot;">​</a></h4><p>Les règles catégoriques fixes incluent une liste fixe de valeurs permises.\`\`\`TypeScript import type { valid } from &quot;@constl/ipa&quot;;</p><p>import { générerClient } from &quot;@constl/ipa&quot;; const client = générerClient({});</p><p>// Une base de données const idBd = await client.bds.créerBd({ licence: &quot;ODBl-1_0&quot; }); const idTableauObservations = await client.bds.ajouterTableauBd({ idBd })</p><p>// Une variable pour le site d&#39;échantillonnage const idVariableSiteÉchantillon = await client.variables.créerVariable({ catégorie: &quot;chaîneNonTraductible&quot; }); await client.variables.sauvegarderNomVariable({ idVariable: idVariableSiteÉchantillon, nom: &quot;Identifiant site&quot;, langue: &quot;fr&quot; }); await client.variables.sauvegarderDescriptionVariable({ idVariable: idVariableSiteÉchantillon, description: &quot;Identifiant du site d&#39;échantillonnage&quot;, langue: &quot;fr&quot; }); const idColonneSiteÉchantillon = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable: idVariableSiteÉchantillon });</p><p>// Une variable pour le niveau d&#39;eau const idVariableNiveauDEau = await client.variables.créerVariable({ catégorie: &quot;numérique&quot; }); await client.variables.sauvegarderNomVariable({ idVariable: idVariableNiveauDEau, nom: &quot;Niveau d&#39;eau&quot;, langue: &quot;fr&quot; }); const idColonneNiveauDEau = await client.tableaux.ajouterColonneTableau({ idTableau, idVariable: idVariableNiveauDEau });</p><p>// Le site doit être l&#39;un des sites d&#39;échantillonnage connus const règleFixe: valid.règleValeurCatégorique = { typeRègle: &quot;valeurCatégorique&quot;, détails: { type: &quot;fixe&quot;, options: [ // Liste des identifiants pour vos sites &quot;Saint-Laurent 1&quot;, &quot;Saint-Laurent 2&quot; ] }, };</p><p>await client.tableaux.ajouterRègleTableau({ idTableau: idTableauObservations, idColonne: idColonneSiteÉchantillon, règle: règleFixe });</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">#### Dynamiques</span></span>
<span class="line"><span style="color:#e1e4e8;">Mais peut-être que vos sites d&#39;échantillonnage risquent d&#39;évoluer avec le temps. Dans ce cas, il serait mieux de créer un autre tableau avec les informations de vos sites (identifiant, longitude et latitude) et lier les deux tableaux ensemble. Ceci peut se faire avec une règle catégorique dynamique.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">:::tip ASTUCE</span></span>
<span class="line"><span style="color:#e1e4e8;">Dans ce cas-ci, nous ajoutons le tableau à la même base de données, mais il pourrait aussi bien appartenir à une base de données à part.</span></span>
<span class="line"><span style="color:#e1e4e8;">:::</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">\`\`\`TypeScript</span></span>
<span class="line"><span style="color:#e1e4e8;">// On ajoute un autre tableau.</span></span>
<span class="line"><span style="color:#e1e4e8;">const idTableauInfoSites = await client.bds.ajouterTableauBd({ idBd });</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const idVariableIdSite = await client.variables.créerVariable({ </span></span>
<span class="line"><span style="color:#e1e4e8;">    catégorie: &quot;chaîneNonTraductible&quot; </span></span>
<span class="line"><span style="color:#e1e4e8;">});</span></span>
<span class="line"><span style="color:#e1e4e8;">const idColonneIdSite = await client.tableaux.ajouterColonneTableau({</span></span>
<span class="line"><span style="color:#e1e4e8;">    idTableau: idTableauInfoSites,</span></span>
<span class="line"><span style="color:#e1e4e8;">    idVariable: idVariableIdSite,</span></span>
<span class="line"><span style="color:#e1e4e8;">});</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">const règleDynamique: règleValeurCatégorique = {</span></span>
<span class="line"><span style="color:#e1e4e8;">    typeRègle: &quot;valeurCatégorique&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">    détails: {</span></span>
<span class="line"><span style="color:#e1e4e8;">        type: &quot;dynamique&quot;,</span></span>
<span class="line"><span style="color:#e1e4e8;">        tableau: idTableauInfoSites,</span></span>
<span class="line"><span style="color:#e1e4e8;">        colonne: idColonneIdSite,</span></span>
<span class="line"><span style="color:#e1e4e8;">    },</span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">await client.variables.ajouterRègleTableau({ </span></span>
<span class="line"><span style="color:#e1e4e8;">    idTableau: idTableauObservations, </span></span>
<span class="line"><span style="color:#e1e4e8;">    idColonne: idColonneSiteÉchantillon,</span></span>
<span class="line"><span style="color:#e1e4e8;">    règle: règleFixe </span></span>
<span class="line"><span style="color:#e1e4e8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">#### Dynamiques</span></span>
<span class="line"><span style="color:#24292e;">Mais peut-être que vos sites d&#39;échantillonnage risquent d&#39;évoluer avec le temps. Dans ce cas, il serait mieux de créer un autre tableau avec les informations de vos sites (identifiant, longitude et latitude) et lier les deux tableaux ensemble. Ceci peut se faire avec une règle catégorique dynamique.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">:::tip ASTUCE</span></span>
<span class="line"><span style="color:#24292e;">Dans ce cas-ci, nous ajoutons le tableau à la même base de données, mais il pourrait aussi bien appartenir à une base de données à part.</span></span>
<span class="line"><span style="color:#24292e;">:::</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">\`\`\`TypeScript</span></span>
<span class="line"><span style="color:#24292e;">// On ajoute un autre tableau.</span></span>
<span class="line"><span style="color:#24292e;">const idTableauInfoSites = await client.bds.ajouterTableauBd({ idBd });</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const idVariableIdSite = await client.variables.créerVariable({ </span></span>
<span class="line"><span style="color:#24292e;">    catégorie: &quot;chaîneNonTraductible&quot; </span></span>
<span class="line"><span style="color:#24292e;">});</span></span>
<span class="line"><span style="color:#24292e;">const idColonneIdSite = await client.tableaux.ajouterColonneTableau({</span></span>
<span class="line"><span style="color:#24292e;">    idTableau: idTableauInfoSites,</span></span>
<span class="line"><span style="color:#24292e;">    idVariable: idVariableIdSite,</span></span>
<span class="line"><span style="color:#24292e;">});</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">const règleDynamique: règleValeurCatégorique = {</span></span>
<span class="line"><span style="color:#24292e;">    typeRègle: &quot;valeurCatégorique&quot;,</span></span>
<span class="line"><span style="color:#24292e;">    détails: {</span></span>
<span class="line"><span style="color:#24292e;">        type: &quot;dynamique&quot;,</span></span>
<span class="line"><span style="color:#24292e;">        tableau: idTableauInfoSites,</span></span>
<span class="line"><span style="color:#24292e;">        colonne: idColonneIdSite,</span></span>
<span class="line"><span style="color:#24292e;">    },</span></span>
<span class="line"><span style="color:#24292e;">};</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">await client.variables.ajouterRègleTableau({ </span></span>
<span class="line"><span style="color:#24292e;">    idTableau: idTableauObservations, </span></span>
<span class="line"><span style="color:#24292e;">    idColonne: idColonneSiteÉchantillon,</span></span>
<span class="line"><span style="color:#24292e;">    règle: règleFixe </span></span>
<span class="line"><span style="color:#24292e;">});</span></span></code></pre></div><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><h2 id="types-regles" tabindex="-1">Types règles <a class="header-anchor" href="#types-regles" aria-label="Permalink to &quot;Types règles&quot;">​</a></h2><p>Ces types spécifient les structures des règles de tableau et de variable.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleColonne</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariableAvecId</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">source</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sourceRègle</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">colonne</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariableAvecId</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleExiste</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleBornes</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleValeurCatégorique</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleCatégorie</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleColonne</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariableAvecId</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">source</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sourceRègle</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">colonne</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariableAvecId</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleExiste</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleBornes</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleValeurCatégorique</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleCatégorie</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="types-erreurs" tabindex="-1">Types erreurs <a class="header-anchor" href="#types-erreurs" aria-label="Permalink to &quot;Types erreurs&quot;">​</a></h2><p>Ces types sont associés aux erreurs de validation des données et des règles elles-mêmes.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurValidation</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleVariable</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">erreur</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleColonne</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleCatégoriqueColonneInexistante</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleBornesColonneInexistante</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleBornesVariableNonPrésente</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleCatégoriqueColonneInexistante</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleColonne</span><span style="color:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">règleValeurCatégorique</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">détailsRègleValeurCatégoriqueDynamique</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">détails</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;colonneCatégInexistante&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleBornesColonneInexistante</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleColonne</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">règleBornes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">détailsRègleBornesDynamiqueColonne</span><span style="color:#E1E4E8;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">détails</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;colonneBornesInexistante&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">erreurRègleBornesVariableNonPrésente</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">règle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">règleColonne</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">règleBornes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">détailsRègleBornesDynamiqueVariable</span><span style="color:#E1E4E8;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">détails</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;variableBornesNonPrésente&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurValidation</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleVariable</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">erreur</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleColonne</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleCatégoriqueColonneInexistante</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleBornesColonneInexistante</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleBornesVariableNonPrésente</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleCatégoriqueColonneInexistante</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleColonne</span><span style="color:#24292E;">&lt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">règleValeurCatégorique</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">détailsRègleValeurCatégoriqueDynamique</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">détails</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;colonneCatégInexistante&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleBornesColonneInexistante</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleColonne</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">règleBornes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">détailsRègleBornesDynamiqueColonne</span><span style="color:#24292E;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">détails</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;colonneBornesInexistante&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">erreurRègleBornesVariableNonPrésente</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">règle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">règleColonne</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">règleBornes</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">détailsRègleBornesDynamiqueVariable</span><span style="color:#24292E;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">détails</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;variableBornesNonPrésente&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,41),o=[p];function t(r,c,i,y,E,u){return a(),n("div",null,o)}const g=s(e,[["render",t]]);export{F as __pageData,g as default};
